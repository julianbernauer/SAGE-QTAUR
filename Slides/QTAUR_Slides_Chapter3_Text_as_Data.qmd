---
title: "Chapter 3"
author: "Julian Bernauer und Anna Wohlmann"
format: pptx
editor: visual
---

```{r}
#| include: false
datadir <- "C:\\Users\\AnnaW\\OneDrive\\neu2024\\book\\SAGE-QTAUR\\data\\chapter3"

```

## Agenda

-   How to get text files into R

-   Party Manifestos

-   Retrieving Wikipedia data

-   Retrieving song lyrics through an API

-   Preprocessing (cleaning) text data

-   Preprocessing text data including special characters

    ## Contents: notes

    !import code from ch3

bullet points ch3 content:

-   scraping and APIs example geniusr package

<!-- -->

-   process: df to corpus

-   document level variabels

-   access parts of a corpus

-   again dfm, new tokens & tokens manipulation, removing things

-   more details on stopwords

-   handling emojis, urls, hashtags, handles

-   subset function for dfs also for rap music categories

-   regex

-   word frequencies

## Getting text files into R

-   where are you getting your data from?

-   in what format is your data?

-   R packages for frequently used data types/ sources

    ```{r}
    library(readtext)
    library(getwiki)
    ```

## Party manifestos

Log-in to get access:

-   polidoc shiny.mzes.uni-mannheim.de/polidoc
-   CMP <https://manifesto-project.>wzb.eu/

## readtext package

-   install or load (library) the package "readtext" and load saved .txt data:

```{r}
library(readtext)
df_uk <- readtext(paste0(datadir,"/UK17"), encoding="UTF-8")
```

## ⓘ Dataframes (short df)

```{r}
df_uk
```

-   tabular data structure

-   data is arranged in rows and columns

-   can be of different types within one dataframe e.g., numeric or characters

-   columns carry the variable names - access: df\$variablename

-   Rows labelled or index number

-   dataframe can be exported CSV or Excel

## π UTF-8 ("Unicode Transformation Format-8-bit")

```{r}
encoding="UTF-8"

```

-   character encoding standard that assigns a unique binary code to each character in most of the world's writing systems.

-   UTF-8 uses variable-length encoding, allowing it to efficiently represent both common and less frequently used characters.

-   To make sure that all the symbols in the texts you are analysing in R are displayed correctly, independent of their language or special characters (including emojis), you should make sure to import them in UTF-8.

-   ways to check and change the encoding of text: free editor Notepad++, where there is a menu entry “Encoding” to check and alter the encoding.

-   Besides our text input, to show UTF-8 files correctly, we also want our outputs in UTF-8. To change the standard encoding of R files, go to Tools \> Global Options \> Code \> Saving and set the default text encoding to UTF-8.

-   If you want to change a file you worked with prior to UTF-8 encoding, go to File and click "reopen with encodings", and choose UTF-8 from the list.

## Wikipedia data

-   R package just to get Wikipedia data:

```{r}
library("getwiki")
diwali <- get_wiki("Diwali",clean = T)
```

-   get more data at once through a loop:

```{r}
holidays <- c("Diwali", "Holi", "Christmas","Easter", "Eid_al_Fitr","Eid_al_Adha", "Kathina", "Vesakh", "Pessach", "Jom_Kippur")
holiday_texts <- c() #empty
for (holiday in holidays){ #for loop
  holiday_texts <- c(holiday_texts, get_wiki(holiday, clean = T))
  Sys.sleep(3) #take a break
}

```

## ♕ Loops in R

-   for loop example:

```{r}
for (holiday in holidays){ #for loop
  holiday_texts <- c(holiday_texts, get_wiki(holiday, clean = T))
  Sys.sleep(3) #take a break
}
```

-   are invaluable tools for executing repetitive tasks across all elements of a vector.

-   The structure of a for-loop is defined as follows:

    ```{r}
    for (variable in vector) { do this }
    ```

-   The loop iterates over each element of the vector until it reaches the end.

    ```{r}
    (i in vector)
    ```

-   the 'variable', often referred to as 'i', is utilized to represent each element in the vector sequentially.

-   It's essential to note that if you intend to create a list within the loop, you must ensure that you append elements to the list to avoid overwriting existing entries:

    ```{r}
    holiday_texts <- c() #empty
    ```

-   other loops: while-loop, repeat-loop

## APIs - Genius API

-   accessing data

-   ...

-   

## Work along exercise: Preprocessing data

-\> dataset manipulation, preprocessing

-   load in text data from a .txt file for example party manifestos

```{r}

```

## 

## Homework Questions

1)  Which R package can be helpful to make sure you are allowed to scrape a webpage?
2)  Why do we use paste0 when loading in data based on a set directory and a string?

```{r eval=F, warning=FALSE}
data <- readtext(paste0(datadir,"/exercise3"), encoding="UTF8")
```

3)  Sören loads a text file into R with *readtext* and prints the content; this is what he sees:

```{r eval=F, echo=FALSE, warning=FALSE}
print("Hi everÿone :Ð My nàme is SÃ¶ren, Î am 24 yeárs old ând I lÔve skiing!")
```

What did he do wrong?

Read case study (Carlos Gueiros): Labelling political topics with transformer models using YouTube text data

## Homework Exercises

1)  Create a corpus from a character vector that consists of multiple texts; create the character vector yourself. Hint: You can link character vectors together into one character vector with c().

2)  Go to the polidoc page (shiny.mzes.uni-mannheim.de/polidoc) and download a few party manifestos of your choice (as .txt), read them into R with the *readtext* package, and create a corpus. Now you can play with that data: add document-level variables, tokenize and create plots. Use the examples from chapters 2 and 3 as a guide.

3)  Sign up for a Genius API (or another API of your choice). Check the terms of use to make sure what you want to do is legal. Store your genius token in R. Now load the lyrics to your favourite song in R.

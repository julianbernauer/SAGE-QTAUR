---
title: "Chapter 3"
author: "Julian Bernauer und Anna Wohlmann"
format: pptx
editor: visual
---

## Contents

-   How to get text files into R and clean them

-   Retrieving Wikipedia data

-   Retrieving song lyrics through an API

-   Preprocessing text data including special characters

-   Interlude: The ethics of web scraping and data privacy

    ## Contents: notes

    !import code from ch3

bullet points ch3 content:

-   dataframe c

-   manifestos sources c

-   readtext c

-   process: df to corpus

-   document level variabels

-   access parts of a corpus

-   again dfm, new tokens & tokens manipulation, removing things

-   more details on stopwords

-   Wikipedia data: package c

-   loops c

-   handling emojis, urls, hashtags, handles

-   subset function for dfs also for rap music categories

-   regex

-   scraping and APIs example geniusr package

-   word frequencies

-   ethics/privacy:

    -   fundamental theories of ethics

    -   what is privacy, GDPR

    -   institutional review bords

    -   apis ethics

## Party manifestos

Sources:

-   polidoc shiny.mzes.uni-mannheim.de/polidoc
-   CMP <https://manifesto-project.>wzb.eu/

## readtext package

```{r}
library(readtext)
df_uk <- readtext(paste0(datadir,"/UK17"), encoding="UTF-8")
```

ⓘ Dataframes (short df) are a tabular data structure that you will come across a lot in R. The data is arranged in rows and columns and can be of different types within one dataframe, for example, numeric or characters. The columns of a dataframe carry the variable names and can be accessed through df\$variablename. Rows can be labelled or have an index number, and therefore all entries can be accessed easily. There are a lot of functions that work on dataframes and other tabular datasets. CSV or Excel can be imported into R as a dataframe, and similarly, a dataframe can be exported into those formats.

utf-8:

## Wikipedia data

```{r}
library("getwiki")
diwali <- get_wiki("Diwali",clean = T)
```

In a loop (explain):

```{r}
holidays <- c("Diwali", "Holi", "Christmas","Easter", "Eid_al_Fitr","Eid_al_Adha", "Kathina", "Vesakh", "Pessach", "Jom_Kippur")
holiday_texts <- c() #empty
for (holiday in holidays){ #for loop
  holiday_texts <- c(holiday_texts, get_wiki(holiday, clean = T))
  Sys.sleep(3) #take a break
}

```

## APIs

## Example: Genius API

## Work along exercise

-\> dataset manipulation, preprocessing

-   choose one of the datasets above to go through all the functions we introduced in the chapter

```{r}

```

## Interlude: ethics and privacy

## 

## Homework Questions

1)  Which R package can be helpful to make sure you are allowed to scrape a webpage?
2)  Why do we use paste0 when loading in data based on a set directory and a string?

```{r eval=F, warning=FALSE}
data <- readtext(paste0(datadir,"/exercise3"), encoding="UTF8")
```

3)  Sören loads a text file into R with *readtext* and prints the content; this is what he sees:

```{r eval=F, echo=FALSE, warning=FALSE}
print("Hi everÿone :Ð My nàme is SÃ¶ren, Î am 24 yeárs old ând I lÔve skiing!")
```

What did he do wrong?

Read case study (Carlos Gueiros): Labelling political topics with transformer models using YouTube text data

### Homework Exercises

1)  Create a corpus from a character vector that consists of multiple texts; create the character vector yourself. Hint: You can link character vectors together into one character vector with c().

2)  Go to the polidoc page (shiny.mzes.uni-mannheim.de/polidoc) and download a few party manifestos of your choice (as .txt), read them into R with the *readtext* package, and create a corpus. Now you can play with that data: add document-level variables, tokenize and create plots. Use the examples from chapters 2 and 3 as a guide.

3)  Sign up for a Genius API (or another API of your choice). Check the terms of use to make sure what you want to do is legal. Store your genius token in R. Now load the lyrics to your favourite song in R.
